@page "/account/manage/friendrequest"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SportEventsApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

<h3 class="mb-4">Friend Requests</h3>

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status"></div>
    </div>
}
else if (friendRequests != null && friendRequests.Any())
{
    <div class="row row-cols-1 row-cols-md-2 g-3">
        @foreach (var request in friendRequests)
        {
            <div class="col-xl-6">
                <div class="card shadow-sm">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-1">@request.SenderName</h5>
                            <p class="card-text text-muted mb-0" style="font-size:small;">@request.SenderEmail?.ToLower()</p>
                            <p class="card-text text-muted mb-0">wants to be your friend</p>
                        </div>
                        <div>
                            <button class="btn btn-outline-success btn-sm me-2" @onclick="() => AcceptRequest(request.Id)">
                                <i class="bi bi-check-lg"></i> Accept
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeclineRequest(request.Id)">
                                <i class="bi bi-x-lg"></i> Decline
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="col-xl-6">
        <div class="alert alert-info mt-4" role="alert">
            You have no friend requests.
        </div>
    </div>
}

@code {
    private List<FriendRequestViewModel> friendRequests = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var currentUser = await UserManager.GetUserAsync(user);

            friendRequests = await DbContext.FriendList
                .Where(f => f.FriendId == Guid.Parse(currentUser.Id) && !f.IsAccepted)
                .Select(f => new FriendRequestViewModel
                    {
                        Id = f.Id,
						SenderEmail = DbContext.Users
								.Where(u => u.Id == f.UserId.ToString())
								.Select(u => u.UserName)
								.FirstOrDefault(),
                        SenderName = DbContext.Users
                            .Where(u => u.Id == f.UserId.ToString())
                            .Select(u => u.FullName)
                            .FirstOrDefault()
                    })
                .ToListAsync();
        }
        isLoading = false;
    }

    private async Task AcceptRequest(int requestId)
    {
        var request = DbContext.FriendList.FirstOrDefault(f => f.Id == requestId);
        if (request != null)
        {
            request.IsAccepted = true;
            await DbContext.SaveChangesAsync();
            friendRequests.RemoveAll(r => r.Id == requestId);
            StateHasChanged();
        }
    }

    private async Task DeclineRequest(int requestId)
    {
        var request = DbContext.FriendList.FirstOrDefault(f => f.Id == requestId);
        if (request != null)
        {
            DbContext.FriendList.Remove(request);
            await DbContext.SaveChangesAsync();
            friendRequests.RemoveAll(r => r.Id == requestId);
            StateHasChanged();
        }
    }

    public class FriendRequestViewModel
    {
        public int Id { get; set; }
		public string SenderEmail { get; set; }
        public string SenderName { get; set; }
    }
}